module cusolverDn
  use iso_c_binding

  ! enums

  enum, bind(C) ! cusolverStatus_t
     enumerator :: CUSOLVER_STATUS_SUCCESS=0
     enumerator :: CUSOLVER_STATUS_NOT_INITIALIZED=1
     enumerator :: CUSOLVER_STATUS_ALLOC_FAILED=2
     enumerator :: CUSOLVER_STATUS_INVALID_VALUE=3
     enumerator :: CUSOLVER_STATUS_ARCH_MISMATCH=4
     enumerator :: CUSOLVER_STATUS_MAPPING_ERROR=5
     enumerator :: CUSOLVER_STATUS_EXECUTION_FAILED=6
     enumerator :: CUSOLVER_STATUS_INTERNAL_ERROR=7
     enumerator :: CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED=8
     enumerator :: CUSOLVER_STATUS_NOT_SUPPORTED = 9
     enumerator :: CUSOLVER_STATUS_ZERO_PIVOT=10
     enumerator :: CUSOLVER_STATUS_INVALID_LICENSE=11
  end enum

  enum, bind(c) ! cusolverEigType_t
     enumerator :: CUSOLVER_EIG_TYPE_1=1
     enumerator :: CUSOLVER_EIG_TYPE_2=2
     enumerator :: CUSOLVER_EIG_TYPE_3=3
  end enum

  enum, bind(c) ! cusolverEigMode_t
     enumerator :: CUSOLVER_EIG_MODE_NOVECTOR=0
     enumerator :: CUSOLVER_EIG_MODE_VECTOR=1
  end enum

  ! types

  type cusolverDnHandle
     type(c_ptr) :: handle
  end type cusolverDnHandle

  ! ---------
  ! functions
  ! ---------

  interface
     integer(c_int) function cusolverDnCreate(handle) &
          bind(C,name='cusolverDnCreate')
       import cusolverDnHandle
       type(cusolverDnHandle) :: handle
     end function cusolverDnCreate
  end interface

  interface
     integer(c_int) function cusolverDnDestroy(handle) &
          bind(C,name='cusolverDnDestroy')
       import cusolverDnHandle
       type(cusolverDnHandle), value :: handle
     end function cusolverDnDestroy
  end interface

  interface
     integer(c_int) function cusolverDnSetStream(handle, stream) &
          bind(C,name='cusolverDnSetStream')
       use cudafor
       import cusolverDnHandle
       type(cusolverDnHandle), value :: handle
       integer(cuda_stream_kind), value :: stream
     end function cusolverDnSetStream
  end interface

  interface
     integer(c_int) function cusolverDnZpotrf_bufferSize( &
          handle, uplo, n, A, lda, Lwork) &
          bind(C, name='cusolverDnZpotrf_bufferSize') 
       use iso_c_binding
       import cusolverDnHandle
       type(cusolverDnHandle), value :: handle 
       integer(c_int), value :: uplo 
       integer(c_int), value :: n 
       complex(8), device :: A(*) 
       integer(c_int), value :: lda 
       integer(c_int) :: Lwork
     end function cusolverDnZpotrf_bufferSize
  end interface

  interface
     integer(c_int) function cusolverDnZpotrf( &
          handle, uplo, n, A, lda, Workspace, Lwork, devInfo) &
          bind(C,name='cusolverDnZpotrf') 
       use iso_c_binding
       import cusolverDnHandle
       type(cusolverDnHandle), value :: handle 
       integer(c_int), value :: uplo 
       integer(c_int), value :: n 
       complex(8), device :: A(*) 
       integer(c_int), value :: lda 
       !pgi$ ignore_tkr (r) Workspace
       complex(8), device :: Workspace(*)
       integer(c_int), value :: Lwork
       integer(c_int), device :: devInfo
     end function cusolverDnZpotrf
  end interface
end module cusolverDn
  

